@startuml uc03
title "Use Case #3: Create Conversation"

'Styling goes here
hide footbox
skinparam stereotypePosition bottom
skinparam sequenceMessageAlign direction
skinparam sequence {
	LifeLineBorderColor #Silver
	LifeLineBackgroundColor #Gainsboro
}

'Add a legend plus styling
skinparam legend {
	backgroundColor #GhostWhite
	entrySeparator #GhostWhite
}

legend top
	<#GhostWhite,#GhostWhite>|	|= __Legend__ |
	|<#red> | Sender|
	|<#silver> | Server|
	|<#blue> | Receiver|
endlegend

'Setup the objects involved here
actor Sender as s <<Actor>> #red
boundary SenderDevice as sd <<Boundary>> #red
boundary SenderConversationWindow as scw <<Boundary>> #red
control SenderConversationManager as scm <<Control>> #red
control SenderVaultManager as svm <<Control>> #red
control Server as srv <<Control>> #silver
control WSHandler as ws <<Control>> #silver
control ReceiverVaultManager as rvm <<Control>> #blue
control ReceiverConversationManager as rcm <<Control>> #blue
boundary ReceiverConversationWindow as rcw <<Boundary>> #blue
boundary ReceiverDevice as rd <<Boundary>> #blue
actor Receiver as r <<Actor>> #blue

'Setup persistent objects here
activate s
activate sd
activate svm
activate srv
activate ws
activate rvm
activate rd
activate r

'--- FLOW OF CONTROL STARTS HERE ---
'Sender press creates conversation and select the user from the contact list. The sender's vault manager gets the user's details.
s -> sd: click "Create Conversation"
sd -> svm: getContactList()
svm --> sd: return: Contacts[]
sd -> s: displays contact list
s -> sd: select contact

'Sender's device creates a new conversation handler and window and performs the first steps of the cryptographic key exchange operation.
sd -> scw: open(uuid receiver)
activate scw
scw -> scm: createConversation(\n\tuuid receiver, \n\tPublicKey receiverPK\n)
activate scm
scm -> svm: getSecrets()
scm -> scm: createSession(uuid receiver) -> Session


'---------------------------------------------------

' Sender device sends the public key and prekey bundle to the server
sd -> cc: sending public key & prekey bundle
cc -> srv: initiateKeyExchange(public key, prekey bundle)

' Server sends the initiation message to the receiver device and receiver device verifies the sender identity
activate rd
srv -> rd: sends the initiation message
rd -> rd: verify the sender identity
rd -> rd: run Triple Diffie-Hellman (X3DH) to derive shared secret

' Failed Case: Sender identity cannot be verify or failed X3DH
group sender identity cannot be verify or failed X3DH
	rd -> srv: sender identity cannot be verify or failed X3DH
	srv -> cc: return: failed to create conversation
	cc -> sd: failed to create conversation
	rnote over sd
	Sequence prematurely end here
	end note
end

' Default case: Sender identity verified and X3DH success
rd -> r: display invite

' Failed Case: Receiver denies the invite
group receiver denies the invite
	r -> rd: receiver Deny invite
	rd --> srv: sends deny invite
	srv --> cc: return: invite denied
	cc -> sd: receiver denied the invite
	rnote over sd
	Sequence prematurely end here
	end note
end

' Receiver accepts the invite
r -> rd: accept invite
rd --> srv: send initial message
srv --> cc: return: initial message
cc -> sd: receive initial message

' Sender device receives the initial message and verify the receiver identity
sd -> sd: verify the receiver identity
sd -> sd: run Triple Diffie-Hellman (X3DH) to derive shared secret

' Failed Case: Receiver identity cannot be verify or failed X3DH
group sender identity cannot be verify or failed X3DH
	sd -> sd: sender identity cannot be verify or failed X3DH
	rnote over sd
	Sequence prematurely end here
	end note
end

rnote over sd
  Conversation created successfully
  the users can start chatting
end note

'--- FLOW OF CONTROL ENDS HERE   ---
@enduml
