@startuml uc15
title "Use Case #15: Send Message"

'Styling goes here
hide footbox
skinparam stereotypePosition bottom
skinparam sequenceMessageAlign direction
skinparam sequence {
	LifeLineBorderColor #Silver
	LifeLineBackgroundColor #Gainsboro
}

'Add a legend plus styling
skinparam legend {
	backgroundColor #GhostWhite
	entrySeparator #GhostWhite
}

legend top
	<#GhostWhite,#GhostWhite>|	|= __Legend__ |
	|<#red> | Sender|
	|<#silver> | Server|
	|<#blue> | Receiver|
endlegend

'Setup the objects involved here
actor SendingUser as u <<Actor>> #red
boundary SenderConversationWindow as scw <<Boundary>> #red
control SenderConversationManager as scm <<Control>> #red
control SendMessageRoute as smr <<Control>> #silver
control WebsocketHandler as ws <<Control>> #silver
control DatabaseManager as db <<Control>> #silver
boundary RecipientDevice as rd <<Boundary>> #blue

'Setup persistent objects here
activate u
activate scw
activate scm
activate smr
activate ws
activate db
activate rd

'--- FLOW OF CONTROL STARTS HERE ---
'The sending user composes a message.
u -> scw: Sending user composes a message \nin the text box at the bottom of the \nwindow and presses send
scw -> scm: newMessage(content) -> Message

'The sending userâ€™s device encrypts the message and updates the ratchet state before sending the message.
scm -> scm: seshKey.encrypt(message)\n -> EMessage em
scm -> scm: updateSessionState()
scm -> smr: POST /api/conversations/:roomId/send \n\tjson::{recvId, em}

'Check if the user is online first.
smr -> ws: query(recvId) -> bool

'Case 1: The recipient is online
group Recipient Online (ws query is true)
	'If the receiving user is online, they call Use Case 16: Receive Chat to receive the chat immediately.
	smr -> ws: wsMessage(ws, recvId, em)
	rnote over rd
	"Use Case #16: Receive Chat" is called
	immediately to receive the message.
	end note
end

'Case 2: The recipient is offline
group Recipient Offline (ws query is false)
	'If the receiving user is offline, a notification is sent to them and their device pulls down the message the next time they enter the chat room.
	'The server enqueues the message into the receiver's receive queue.
	smr -> db: recvId.messageQueue.enqueue(roomId, em)
	smr --> rd: PUSH_NOTIF: new message available
	rnote over rd
	"Use Case #16: Receive Chat" is 
	called the next time the recipient
	enters into the conversation with
	the sender.
	end note
end

'Cleanup
smr --> scm: RET json::{success, send_ack}
scm -> scw: onSuccessfulSend(message)
scw -> u: sent message is displayed \nin the chat room
'--- FLOW OF CONTROL ENDS HERE   ---

@enduml
