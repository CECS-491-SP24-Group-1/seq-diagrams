@startuml uc02
title "Use Case #2: User Login"

'Styling goes here
hide footbox
skinparam stereotypePosition bottom
skinparam sequenceMessageAlign direction
skinparam sequence {
    LifeLineBorderColor #Silver
    LifeLineBackgroundColor #Gainsboro
}

'Add a legend plus styling
skinparam legend {
	backgroundColor #GhostWhite
	entrySeparator #GhostWhite
}

legend top
	<#GhostWhite,#GhostWhite>|	|= __Legend__ |
	|<#red> | Clientside|
	|<#silver> | Serverside|
endlegend

'Setup the objects involved here
actor User as u <<Actor>> #red
boundary App as a <<Boundary>> #red
boundary LoginWindow as lw <<Boundary>> #red
control CryptoAPI as ca <<Control>> #red
control VaultManager as vm <<Control>> #red
entity Vault as v <<Entity>> #red
control LoginRoute as lr <<Control>> #silver
control DatabaseManager as db <<Control>> #silver

'Setup persistent objects here
activate u 
activate a
activate ca
activate vm
activate lr
activate db

'--- FLOW OF CONTROL STARTS HERE ---
'User selects “Login” on the front page.
u -> a: Selects “Login” \nin the welcome window

'System shows a form to login.
a -> lw: show()
activate lw

=="Use Case #5: Decrypt Vault" is called to decrypt the vault==
vm -> v: load()
activate v

'User's device creates a nonce, signs it, and sends it to the server.
ca -> ca: generateNonce() -> nonce
ca -> ca: sk.sign(nonce) -> signature
lw -> lr: POST /api/users/login json::{user_info, nonce, signature}

'The server verifies the signature against the known public key.
lr -> db: QUERY user_info.id, user_info.pk
db --> lr: return: PublicKey pk
lr -> lr: pk.verify(signature, nonce)

'Case 1: The signature is invalid.
group Invalid signature
	lr --> a: RESP json::{error, invalid_signature}
	a -> u: Alert "Invalid signature"
	rnote over u
	Flow of control prematurely ends here.
	endrnote
end

'Server issues a token for the user, establishing the existence of the login session.
lr -> lr: issueToken(user_info.id) -> token
lr -> db: PUT user_info.tokens.append(token)

'Server sends the token to the user, confirming the success of the login
lr --> lw: RESP json::{success, token}

'User persists the token in local storage.
lw -> vm: store(token)
vm -> v: user.tokens.append(token)
vm --> lw: return: store successful
deactivate lw
'--- FLOW OF CONTROL ENDS HERE   ---

@enduml
