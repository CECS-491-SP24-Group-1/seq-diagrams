@startuml uc08_email
title "Use Case #8: Challenge User - Email"

'Styling goes here
hide footbox
skinparam stereotypePosition bottom
skinparam sequenceMessageAlign direction
skinparam sequence {
	LifeLineBorderColor #Silver
	LifeLineBackgroundColor #Gainsboro
}

'Setup the objects involved here
actor User as u <<Actor>>
boundary WebBrowser as wb <<Boundary>>
control ChallengeRoute as cr <<Control>>
control DatabaseManager as db <<Control>>
boundary SMTPClient as sc <<Boundary>>

'Setup persistent objects here
activate u
activate wb
activate cr
activate db
activate sc

'--- FLOW OF CONTROL STARTS HERE ---
'User gets an email with their challenge code and visits the link in their browser.
u -> wb: visit: challenge URL from email
wb -> cr: GET /api/challenges/:id/solve?sol=:payload&token=:token

'Server checks if the challenge is valid
cr -> db: QUERY challenge.id

'Case 1: The challenge doesn't exist
group Nonexistant challenge
	db --> cr: error: no record found
	cr --> wb: RESP json::{error, no_record_found}
	wb -> u: Alert "Nonexistant challenge"
	rnote over u
	Flow of control prematurely ends here.
	endrnote
end

'Case 2: The challenge is invalid, not for this user, not email challenge, or the solution is incorrect.
group Challenge isn't valid \nChallenge 'for' and auth 'subject' mismatch \nChallenge isn't valid for emails \nChallenge solution incorrect
	db --> cr: return: Challenge
	cr -> cr: validate(challenge)
	cr --> wb: RESP json::{error, unauthorized}
	wb -> u: Alert "Challenge solve failure; reason"
	rnote over u
	Flow of control prematurely ends here.
	endrnote
end

'Default case: challenge exists and is valid
db --> cr: return: Challenge
cr -> cr: validate(challenge)

'Query the database for the user flags.
cr -> db: QUERY token.subject.flags, token.subject.email
db --> cr: return: flags, pubkey, email

'Mark the user's email as verified
cr -> db: MODIFY token.subject, token.subject.email_verified = true

'Also unmark the user's account for deletion if the public key is verified.
group User public key is also verified
	cr -> db: MODIFY token.subject, token.subject.should_purge = false
	cr -> db: MODIFY token.subject, token.subject.purge_by = nil
end

'Email the user to inform of successful challenge completion and next steps.
cr -> cr: composeEmail(flag_statuses & more) -> emailContent
cr -> sc: sendEmail(token.subject.email, emailContent)

'Cleanup and return the feedback to the user
cr -> db: DELETE challenge.id
cr --> wb: RESP json::{success, email_verified_successfully}
'--- FLOW OF CONTROL ENDS HERE   ---

@enduml
