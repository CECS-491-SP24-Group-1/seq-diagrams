
@startuml uc14
title "Use Case #14: Delete Conversation"

'Styling goes here
hide footbox
skinparam stereotypePosition bottom
skinparam sequenceMessageAlign direction
skinparam sequence {
	LifeLineBorderColor #Silver
	LifeLineBackgroundColor #Gainsboro
}

'Add a legend plus styling
skinparam legend {
	backgroundColor #GhostWhite
	entrySeparator #GhostWhite
}

legend top
	<#GhostWhite,#GhostWhite>|	|= __Legend__ |
	|<#red> | Sender|
	|<#silver> | Server|
	|<#blue> | Receiver|
endlegend

'Setup the objects involved here
actor Sender as s <<Actor>> #red
boundary SenderDevice as sd <<Boundary>> #red
boundary SenderConversationWindow as scw <<Boundary>> #red
control SenderConversationManager as scm <<Control>> #red
control SenderVaultManager as svm <<Control>> #red
control ChatRouter as cr <<Control>> #silver
control ReceiverVaultManager as rvm <<Control>> #blue
control ReceiverConversationManager as rcm <<Control>> #blue
boundary ReceiverConversationWindow as rcw <<Boundary>> #blue
boundary ReceiverDevice as rd <<Boundary>> #blue
actor Receiver as r <<Actor>> #blue

'Setup persistent objects here
activate s
activate sd
activate scw
activate scm
activate svm
activate cr
activate rvm
activate rcm
activate rcw
activate rd
activate r

'--- FLOW OF CONTROL STARTS HERE ---
'The user clicks on the options button for the chat room and selects “Delete”. This is the initiating party.
s -> sd: Initiator clicks on "Delete" \noption in the conversation \nsettings

'The user’s device asks the user if they want to delete the chat. The user will be warned that the chat room on the other side may not be immediately deleted once this is done
sd -> s: Asks if they want to delete \nconversation and warns \nthat other side may not \nfollow suit

'The user clicks “Yes” on the confirmation prompt asking them to delete the chat.
s -> sd: Clicks "yes" on the \nconfirmation prompt

'The user’s device creates a deletion request for the other user and calls Use Case 15: Send Chat to pass the request to the other party.
rnote over s, svm
	"Use Case #15: Send Message" is called to issue a conversation deletion request to the other party using the following methods:
endrnote
scm -> scm: requestConvoDelete() -> \n\tEMessage convoDeletionReq
scm -> cr: POST /api/conversations/:roomId/send \n\tjson::{recvId, convoDeletionReq}

'User is brought back to the chats list and the chat is removed from the list.
rnote over s, svm
	"Use Case #11: Leave Conversation" is called to cleanup objects on the sender side, but the vault save step is skipped.
endrnote

'The initiating user’s device nullifies the double ratchet, session keypair, and the session is marked as closed. The session is then purged from their vault.
scm -> scm: destroySession(convoId)
scm -> svm: deleteConversation(convoId)
scm -> scw: informSuccessfulDeletion()
deactivate scm
scw -> s: Sender is sent back to the conversations list
deactivate scw

'===================== receiver's turn to act

'The responding user receives the chat via Use Case 16: Receive Chat and detects the close request.
rnote over r, rvm
	"Use Case #16: Receive Message" is called to get the deletion request on the receiver side, but a read
	receipt is not sent. They can choose to either honor or ignore the request.
endrnote
cr --> rcm: <MSG containing deletion request is received>

'The responding user nullifies the double ratchet, session keypair, and the session is marked as closed.
rcm -> rcm: destroySession(convoId)

'The responding user’s chat has a message informing them that the initiating user terminated the chat session and sending of messages is disallowed.
rcm -> rcw: markImmutable("\n\tother party terminated \n\tcommunications\n")
rcw -> r: Prevent further input and \nshow the warning about the \nconversation being terminated

'Recipient can choose to honor the request or ignore it
'Case 1: The request is ignored
group Recipient Ignores Conversation Deletion Request
	r ->X rcw: Any changes made by the user \nare blocked. The conversation \nis read-only at this point.
	rnote over rvm
		The recipient can choose
		to honor the deletion
		request at any time, but
		the conversation will be 
		read-only. Further comms 
		between these users must
		occur in a new conversation.
	endrnote
end

'Case 2: The request is honored
group Recipient Honors Conversation Deletion Request
	'The user clicks on the options button for the chat room and selects “Delete”. This is the responding party.
	r -> rd: Responder clicks on "Delete" \noption in the conversation \nsettings

	'The user’s device asks the user if they want to delete the chat. The user will be warned that the chat room on the other side may not be immediately deleted once this is done
	rd -> r: Asks if they want to delete \nconversation and warns \nthat other side may not \nfollow suit

	'The user clicks “Yes” on the confirmation prompt asking them to delete the chat.
	r -> rd: Clicks "yes" on the \nconfirmation prompt

	'User is brought back to the chats list and the chat is removed from the list.
	rnote over r, rvm
		"Use Case #11: Leave Conversation" is called to cleanup objects on the receiver side, but the vault save step is skipped.
	endrnote

	'The responding user’s device nullifies the double ratchet, session keypair, and the session is marked as closed. The session is then purged from their vault.
	rcm -> rvm: deleteConversation(convoId)
	rcm -> rcw: informSuccessfulDeletion()
	deactivate rcm
	rcw -> r: Receiver is sent back to the conversations list
	deactivate rcw
end
'--- FLOW OF CONTROL ENDS HERE   ---

@enduml