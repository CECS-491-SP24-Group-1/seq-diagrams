@startuml uc04
title "Use Case #4: Delete Message"

'Styling goes here
hide footbox
skinparam stereotypePosition bottom
skinparam sequenceMessageAlign direction
skinparam sequence {
	LifeLineBorderColor #Silver
	LifeLineBackgroundColor #Gainsboro
}

'Add a legend plus styling
skinparam legend {
	backgroundColor #GhostWhite
	entrySeparator #GhostWhite
}

legend top
	<#GhostWhite,#GhostWhite>|	|= __Legend__ |
	|<#red> | Sender|
	|<#silver> | Server|
	|<#blue> | Receiver|
endlegend

'Setup the objects involved here
actor Sender as s <<Actor>> #red
boundary SenderConversationWindow as scw <<Boundary>> #red
control SenderConversationManager as scm <<Control>> #red
control ChatRouter as cr <<Control>> #silver
control DatabaseManager as db <<Control>> #silver
control ReceiverConversationManager as rcm <<Control>> #blue
boundary ReceiverConversationWindow as rcw <<Boundary>> #blue

'Setup persistent objects here
activate s
activate scw
activate scm
activate cr
activate db
activate rcm
activate rcw

'--- FLOW OF CONTROL STARTS HERE ---
'User right clicks/hard presses on a message to open up its menu and selects delete.
s -> scw: Right clicks/hard presses on a \nmessage and selects "Delete".
scw -> s: Asks if they want to delete \nthe message
s -> scw: Clicks "yes" on the \nconfirmation prompt
scw -> scm: delete(message.id)

'The userâ€™s device creates a deletion request for the other user and calls Use Case 15: Send Chat to pass the request to the other party.
rnote over s, scm
	"Use Case #15: Send Message" is called to issue a message deletion request to the other party using the following methods:
endrnote
scm -> scm: requestMessageDelete() -> \n\tEMessage msgDeletionReq
scm -> cr: POST /api/conversations/:roomId/send \n\tjson::{recvId, msgDeletionReq}

'The message is removed from the sender's conversation window.
scm -> scw: pop(messageId)
rnote over scw
	The target message is deleted
	and replaced with "Message 
	Deleted" text
endrnote

'===================== receiver's turn to act

'The responding user receives the chat via Use Case 16: Receive Chat and detects the message deletion request.
rnote over rcw, rcm
	"Use Case #16: Receive Message" is called to get the deletion 
	request on the receiver side, but a read receipt is not sent.
	The following 2 cases arise:
endrnote

'The message deletion request is honored by the server if the user is offline.
group The Receiver Is Offline
	'The server pops the message off the queue and it's skipped.
	cr -> db: recvId.messageQueue.pop(\n\troomId, messageId\n)
	rnote over cr, db
		The message is deleted before the receiver sees it.
		A notification of this occurring is sent instead to
		avoid breaking the receiving ratchet on the receiver
		side.
	endrnote
end

'The message deletion request is honored by the receiver if the user is online.
group The Receiver Is Online
	'The receiver pops the message off the chat log.
	cr --> rcm: <MSG containing deletion request is received>
	rcm -> rcw: pop(messageId)
	rnote over rcw
		The target message is deleted
		and replaced with "Message 
		Deleted" text
	endrnote
	rnote over cr, db
		The message is deleted, which may have already been 
		seen by the user. A placeholder of where the message
		was takes the message's place.
	endrnote
end
'--- FLOW OF CONTROL ENDS HERE   ---

@enduml